fechas <- as.Date(c("2020-01-03", "2020-04-28", '2020-03-20'))
pago <- c(315, 290, 415.5)
pago <- c(315.75, 290, 415.5)
options(digits=13)
clientes <- c("Miguel", "Juan", "Pedro")
fechas <- as.Date(c("2020-01-03", "2020-04-28", '2020-03-20'))
pago <- c(315.75, 290, 415.5)
help(options)
options()
options(digits=2)
clientes <- c("Miguel", "Juan", "Pedro")
fechas <- as.Date(c("2020-01-03", "2020-04-28", '2020-03-20'))
pago <- c(315.75, 290, 415.5)
help(float)
options(digits=2)
clientes <- c("Miguel", "Juan", "Pedro")
fechas <- as.Date(c("2020-01-03", "2020-04-28", '2020-03-20'))
pago <- c(315.75, 290, 415.5)
pedidos <- data.frame(c(clientes, fechas, pago))
View(pedidos)
View(pedidos)
pedidos <- data.frame(clientes, fechas, pago)
View(pedidos)
pago <- as.numeric(c(315.75, 290, 415.5))
pedidos <- data.frame(clientes, fechas, pago)
View(pedidos)
pago <- c(315.75, 290, 415,5)
pedidos <- data.frame(clientes, fechas, pago)
View(pedidos)
save(pedidos, file="../pedidos.Rdata")
saveRDS(pedidos, file="../pedidos.rds")
header(pedidos)
head(pedidos)
options(digits=15)
clientes <- c("Miguel", "Juan", "Pedro")
fechas <- as.Date(c("2020-01-03", "2020-04-28", '2020-03-20'))
pago <- c(315.75, 290, 415.5)
pedidos <- data.frame(clientes, fechas, pago)
save(pedidos, file="../pedidos.Rdata")
saveRDS(pedidos, file="../pedidos.rds")
head(pedidos)
View(pedidos)
options(digits=20)
clientes <- c("Miguel", "Juan", "Pedro")
fechas <- as.Date(c("2020-01-03", "2020-04-28", '2020-03-20'))
pago <- c(315.75, 290, 415.5)
pedidos <- data.frame(clientes, fechas, pago)
save(pedidos, file="../pedidos.Rdata")
saveRDS(pedidos, file="../pedidos.rds")
head(pedidos)
save(pedidos, clientes_vip, file="../pedidos_vip.Rdata")
clientes_vip = x("Miguel", "Pedro")
save(pedidos, file="../pedidos.Rdata")
save(pedidos, clientes_vip, file="../pedidos_vip.Rdata")
saveRDS(pedidos, file="../pedidos.rds")
clientes_vip <- x("Miguel", "Pedro")
save(pedidos, file="../pedidos.Rdata")
save(pedidos, clientes_vip, file="../pedidos_vip.Rdata")
saveRDS(pedidos, file="../pedidos.rds")
clientes_vip <- c("Miguel", "Pedro")
save(pedidos, file="../pedidos.Rdata")
save(pedidos, clientes_vip, file="../pedidos_vip.Rdata")
saveRDS(pedidos, file="../pedidos.rds")
remove(pedidos)
# Ficheros Rdata y rds
setwd("D:/Documents/Estudios/Estudios MOOC/Udemy/CursoR/r-course/data/tema1/scripts")
options(width=100)
options(digits=20)
clientes <- c("Miguel", "Juan", "Pedro")
fechas <- as.Date(c("2020-01-03", "2020-04-28", '2020-03-20'))
pago <- c(315.75, 290, 415.5)
pedidos <- data.frame(clientes, fechas, pago)
clientes_vip <- c("Miguel", "Pedro")
save(pedidos, file="../pedidos.Rdata")
save(pedidos, clientes_vip, file="../pedidos_vip.Rdata")
saveRDS(pedidos, file="../pedidos.rds")
head(pedidos)
remove(clientes, fechas, clientes_vip)
remove(clientes, fechas, clientes_vip, pago)
# Ficheros Rdata y rds
setwd("D:/Documents/Estudios/Estudios MOOC/Udemy/CursoR/r-course/data/tema1/scripts")
options(width=100)
options(digits=20)
clientes <- c("Miguel", "Juan", "Pedro")
clientes_vip <- c("Miguel", "Pedro")
fechas <- as.Date(c("2020-01-03", "2020-04-28", '2020-03-20'))
pago <- c(315.75, 290, 415.5)
pedidos <- data.frame(clientes, fechas, pago)
save(pedidos, file="../pedidos.Rdata")
save(pedidos, clientes_vip, file="../pedidos_vip.Rdata")
saveRDS(pedidos, file="../pedidos.rds")
head(pedidos)
remove(clientes, fechas, clientes_vip, pago)
remove(pedidos, clientes, fechas, clientes_vip, pago)
load("../pedidos.Rdata")
View(pedidos)
pedidos_rds <- readRDS("../pedidos.rds")
View(pedidos_rds)
View(pedidos)
data(iris)
force(iris)
View(iris)
data(cars)
force(cars)
View(cars)
save.image(file="../alldata.Rdata") # Guardar todos los objetos de la sesión
save(list=c("prime", "pow2"), file="../primes_and_pow2.Rdata")
save(list=c("primes", "pow2"), file="../primes_and_pow2.Rdata")
primes <- c(2,3,5,7,11,13)
pow2 <- c(2,4,8,16,32,64)
save(list=c("primes", "pow2"), file="../primes_and_pow2.Rdata")
load("../primes_and_pow2.Rdata")
attach("../primes_and_pow2.Rdata")
data()
data <- read.csv("../missing-data.csv", na.strings="")
# Missing data
setwd("D:/Documents/Estudios/Estudios MOOC/Udemy/CursoR/r-course/data/tema1/scripts")
options(width=100)
options(digits=20)
data <- read.csv("../missing-data.csv", na.strings="")
View(data)
data_limpio <- na.omit(data)
View(data_limpio)
View(data_limpio)
View(data)
is.na(data[4,2])
is.na(data$Income)
data[!is.na(data$Income),]
data_income_clean <- data[!is.na(data$Income),]
View(data_income_clean)
complete.cases(data)
data_limpio_2 <- data[complete.cases(data),]
View(data_limpio_2)
View(data_limpio)
data$Income[data$Income == 0] # 0 ingresos -> NA
data$Income[data$Income == 0] <- NA # 0 ingresos -> NA
View(data)
View(data_limpio)
data <- read.csv("../missing-data.csv", na.strings="") # Identifica no informados como NA
data$Income[data$Income == 0] <- NA # 0 ingresos -> NA
data_limpio <- na.omit(data) # Elimina filas con NA
data_limpio_2 <- data[complete.cases(data),] # Elimina filas con NA
is.na(data[4,2]) # Devuelve T o F
is.na(data$Income) # Devuelve un vector con T o F
data_income_clean <- data[!is.na(data$Income),] # Limpieza selectiva
complete.cases(data) # Devuelve las filas sin NA
View(data_limpio)
View(data_limpio)
# Medidas de centralización y dispersio
mean(data$Income)
mean(data$Income, na.rm=T)
sd(data$Income)
sd(data$Income, na.rm=T) # Devuelve el promedio
data$Income.mean <- ifelse(is.na(data$Income), mean(data$Income, na.rm=T))
data$Income.mean <- ifelse(is.na(data$Income),
mean(data$Income, na.rm=T),
data$Income)
View(data)
View(data)
data <- read.csv("../missing-data.csv", na.strings="") # Identifica no informados como NA
data$Income.mean <- ifelse(is.na(data$Income),
mean(data$Income, na.rm=T),
data$Income)
View(data)
data <- read.csv("../missing-data.csv", na.strings="") # Identifica no informados como NA
data$Income[data$Income == 0] <- NA # 0 ingresos -> NA
data$Income.mean <- ifelse(is.na(data$Income),
mean(data$Income, na.rm=T),
data$Income)
View(data)
options(digits=10)
data <- read.csv("../missing-data.csv", na.strings="") # Identifica no informados como NA
data$Income[data$Income == 0] <- NA # 0 ingresos -> NA
data$Income.mean <- ifelse(is.na(data$Income),
mean(data$Income, na.rm=T),
data$Income)
rand.inputado <- function(x) { # x es un vector de datos con posibles NA
missing <- is.na(x) # vector con T o F dependiendo de si esa fila tiene NA o no
n.missing <- sum(missing) # número de filas con NA
x.obs <- x[!missing] # vector sin NA
inputado <- x
inputado[missing] <- sample(x.obs, n.missing, replace=T) # sustituir missings con una muestra aleatoria
return (inputado)
}
data_limpio <- rand.inputado(data)
random.inputado.data.frame <- function(dataframe, cols) {
names <- names(dataframe)
for(col in cols) {
name <- paste(names[col], ".inputado", sep="")
dataframe[name] <- rand.inputado(dataframe[,col])
}
}
rand.inputado <- function(x) { # x es un vector de datos con posibles NA
missing <- is.na(x) # vector con T o F dependiendo de si esa fila tiene NA o no
n.missing <- sum(missing) # número de filas con NA
x.obs <- x[!missing] # vector sin NA
inputado <- x
inputado[missing] <- sample(x.obs, n.missing, replace=T) # sustituir missings con una muestra aleatoria
return (inputado)
}
random.inputado.data.frame <- function(dataframe, cols) {
names <- names(dataframe)
for(col in cols) {
name <- paste(names[col], ".inputado", sep="")
dataframe[name] <- rand.inputado(dataframe[,col])
}
}
random.inputado.data.frame(data, c(1,2))
data <- read.csv("../missing-data.csv", na.strings="") # Identifica no informados como NA
random.inputado.data.frame(data, c(1,2))
View(data)
return dataframe
random.inputado.data.frame <- function(dataframe, cols) {
names <- names(dataframe)
for(col in cols) {
name <- paste(names[col], ".inputado", sep="")
dataframe[name] <- rand.inputado(dataframe[,col])
}
return dataframe
}
data <- read.csv("../missing-data.csv", na.strings="") # Identifica no informados como NA
random.inputado.data.frame <- function(dataframe, cols) {
names <- names(dataframe)
for(col in cols) {
name <- paste(names[col], ".inputado", sep="")
dataframe[name] <- rand.inputado(dataframe[,col])
}
return (dataframe)
}
data <- read.csv("../missing-data.csv", na.strings="") # Identifica no informados como NA
random.inputado.data.frame(data, c(1,2))
View(data)
View(data_limpio)
data <- random.inputado.data.frame(data, c(1,2))
View(data)
rand.inputado <- function(x) { # x es un vector de datos con posibles NA
missing <- is.na(x) # vector con T o F dependiendo de si esa fila tiene NA o no
n.missing <- sum(missing) # número de filas con NA
x.obs <- x[!missing] # vector sin NA
inputado <- x
inputado[missing] <- sample(x.obs, n.missing, replace=T) # sustituir missings con una muestra aleatoria
return (inputado)
}
random.inputado.data.frame <- function(dataframe, cols) {
names <- names(dataframe)
for(col in cols) {
name <- paste(names[col], ".inputado", sep="")
dataframe[name] <- rand.inputado(dataframe[,col])
}
return (dataframe)
}
data <- read.csv("../missing-data.csv", na.strings="") # Identifica no informados como NA
data$Income[data$Income == 0] <- NA # 0 ingresos -> NA
data <- random.inputado.data.frame(data, c(1,2))
View(data)
rand.inputado <- function(x) { # x es un vector de datos con posibles NA
missing <- is.na(x) # vector con T o F dependiendo de si esa fila tiene NA o no
n.missing <- sum(missing) # número de filas con NA
x.obs <- x[!missing] # vector sin NA
inputado <- x
inputado[missing] <- sample(x.obs, n.missing, replace=T) # sustituir missings con una muestra aleatoria
return (inputado)
}
random.inputado.data.frame <- function(dataframe, cols) {
names <- names(dataframe)
for(col in cols) {
name <- paste(names[col], ".inputado", sep="")
dataframe[name] <- rand.inputado(dataframe[,col])
}
return (dataframe)
}
data <- read.csv("../missing-data.csv", na.strings="") # Identifica no informados como NA
data$Income[data$Income == 0] <- NA # 0 ingresos -> NA
View(data)
data <- random.inputado.data.frame(data, c(1,2))
View(data)
salary <- c(40000, 60000, 50000, 80000, 60000, 70000, 65000)
famlily.salary <- c(40000, 60000, 50000, 80000, 60000, 70000, 65000)
famlily.salary <- c(40000, 60000, 50000, 80000, 60000, 70000, 65000)
family.salary <- c(40000, 60000, 50000, 80000, 60000, 70000, 65000)
family.salary <- c(40000, 60000, 50000, 80000, 60000, 70000, 65000)
family.size <- c(4, 3, 2, 2, 3, 4, 3)
family.car <- c("Lujo", "Compacto", "Utilitario", "Lujo", "Compacto", "Compacto", "Compacto")
family <- data.frame(family.salary, family.size, family.car)
View(family)
unique(family)
family.salary <- c(40000, 60000, 50000, 80000, 60000, 70000, 60000)
family.size <- c(4, 3, 2, 2, 3, 4, 3)
family.car <- c("Lujo", "Compacto", "Utilitario", "Lujo", "Compacto", "Compacto", "Compacto")
family <- data.frame(family.salary, family.size, family.car)
family.salary <- c(40000, 60000, 50000, 80000, 60000, 70000, 60000)
family.size <- c(4, 3, 2, 2, 3, 4, 3)
family.car <- c("Lujo", "Compacto", "Utilitario", "Lujo", "Compacto", "Compacto", "Compacto")
family <- data.frame(family.salary, family.size, family.car)
unique(family)
family.unique <- unique(family) # Elimina filas duplicadas
View(family.unique)
duplicated(family)
family.duplicados <- family[duplicated(family),]
View(family.duplicados)
install.packages("scales")
# Reescalado
setwd("D:/Documents/Estudios/Estudios MOOC/Udemy/CursoR/r-course/data/tema1/scripts")
options(width=100)
options(digits=10)
install.packages("scales")
library(scales)
students <- read.csv("../data-conversion.csv")
install.packages("scales")
library(scales)
install.packages("scales")
install.packages("scales")
students <- read.csv("../data-conversion.csv")
View(students)
students$Income.reescaled <- rescale(students$Income)
install.packages("scales")
library(scales)
students <- read.csv("../data-conversion.csv")
students$Income.reescaled <- rescale(students$Income)
(students$Income - min(students$Income)) / (max(students$Income) - min(students$Income))
rescale(students$Income, to=100)
rescale(students$Income, to=c(0,100))
rescale(students$Income, to=c(0, 100))
dataframe
rescale.many <- function(dataframe, cols) {
names <- names(dataframe)
for (col in cols) {
name <- paste(names[col], "rescaled", sep=".")
dataframe[name] <- rescale(dataframe[,col])
}
cat(paste("Hemos reescalado ", length(cols), " variable(s)"))
dataframe
}
rescale.many(students, c(1, 4))
students <- rescale.many(students, c(1, 4))
View(students)
# Normalización
setwd("D:/Documents/Estudios/Estudios MOOC/Udemy/CursoR/r-course/data/tema1/scripts")
options(width=100)
options(digits=10)
housing <- read.csv("../BostonHousing.csv")
View(housing)
housing.z <- scale(housing)
View(housing.z)
# Normalización
setwd("D:/Documents/Estudios/Estudios MOOC/Udemy/Estadística Descriptiva/repositorio/r-basic_mossa")
options(width=100)
options(digits=10)
SegundoGrado = function(a,b,c) {
x1=((-b)+(sqrt((b^2)-4*a*c)))/(2*a);
x2=((-b)-(sqrt((b^2)-4*a*c)))/(2*a);
my_list <- list("x1" = x1, "x2" = x2);
return (my_list)
}
SegundoGrado(1, -5, 6)
PrimerGrado = function(a,b,c) {
(c-b) / a
}
PrimerGrado(2, 4,0)
PrimerGrado(5, 3,0)
PrimerGrado(7, 4, 18)
PrimerGrado(1, 1, 1)
x=exp(3)-pi
round(x, 3)
c1=(2+3i)^2
c2=(5+8i)
round(Mod(c1/c2),3)
# Normalización
setwd("D:/Documents/Estudios/Estudios MOOC/Udemy/Estadística Descriptiva/repositorio/r-basic_mossa")
options(width=100)
options(digits=10)
opBasic = function(a,b){
print("Suma")
print(a+b)
print("Resta")
print(paste(sprintf("%i - %i = ",a,b),a-b))
print(paste(sprintf("%i - %i = ",b,a),b-a))
print("Producto")
print(a*b)
print("Cociente de la divisiÃ³n entera")
print(paste(sprintf("%i : %i = ",a,b),a%/%b))
print(paste("con resto ",a%%b))
print("Cociente de la divisiÃ³n entera")
print(paste(sprintf("%i : %i = ",b,a),b%/%a))
print(paste("con resto ",b%%a))
}
load("~/Estudios/Estudios MOOC/Udemy/Estadística Descriptiva/repositorio/r-basic_mossa/CursoBasicoR.RData")
load("~/Estudios/Estudios MOOC/Udemy/Estadística Descriptiva/repositorio/r-basic_mossa/CursoBasicoR.RData")
# Normalización
setwd("D:/Documents/Estudios/Estudios MOOC/Udemy/Estadística Descriptiva/repositorio/r-basic_mossa")
options(width=100)
options(digits=10)
SegundoGrado = function(a,b,c) {
x1=((-b)+(sqrt((b^2)-4*a*c)))/(2*a);
x2=((-b)-(sqrt((b^2)-4*a*c)))/(2*a);
my_list <- list("x1" = x1, "x2" = x2);
return (my_list)
}
SegundoGrado(1, -5, 6)
PrimerGrado = function(a,b,c) {
(c-b) / a
}
PrimerGrado(2, 4,0)
PrimerGrado(5, 3,0)
PrimerGrado(7, 4, 18)
PrimerGrado(1, 1, 1)
x=exp(3)-pi
round(x, 3)
c1=(2+3i)^2
c2=(5+8i)
round(Mod(c1/c2),3)
# [Curso de introducción a la estadística descriptiva con R Studio](https://www.udemy.com/estadistica-descriptiva/?couponCode=FROM_BOKDOWN_RSTUDIO)
*Con Juan Gabriel Gomila y María Santos*
help(lm)
install.packages("tidyverse")
library(tidyverse)
install.packages("magic")
library(magic)
detach("package:magic", unload = TRUE)
installed.packages()
install.packages(c("backports", "BH", "broom", "callr", "caret", "checkmate", "cli", "clipr", "data.table", "DBI", "digest", "evaluate", "fansi", "fBasics", "forcats", "foreach", "fs", "GGally", "glue", "gss", "hexbin", "HistData", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "knitr", "latticeExtra", "lava", "lme4", "lubridate", "markdown", "mime", "ModelMetrics", "nloptr", "nycflights13", "openssl", "pkgconfig", "plyr", "prettyunits", "processx", "ps", "R6", "Rcpp", "RcppEigen", "recipes", "reshape2", "rmarkdown", "rstudioapi", "selectr", "SQUAREM", "stringi", "sys", "tibble", "tidyselect", "timeSeries", "tinytex", "whisker", "xfun", "yaml"))
install.packages("tibble")
install.packages("tibble")
Inf
-Inf
NA
NaN
5/0
0/0
2^50# = 1.1259e+15 = 1125900000000000
c(2^30, 2^(-15), 1, 2, 3/2)
log(exp(1))
exp(1)
help("choose")
choose(4,1)
choose(4,2)
choose(4,3)
choose(4,4)
sin(60*pi/180)
cos(60*pi/180)
sinpi(1/2) # = sin (pi/2)
cos(60*pi/180)
print (300, 2)
print(300.12345, 2)
print(300.12345, 5)
print(300.12345, 6)
print(300.12345, 4)
sqrt)2=^2
sqrt(2)^2
sqrt(2)^2-2
sqrt(2)^2-2.0
sqrt(2)^2-sqrt(2)^2/2
sqrt(2)^2-sqrt(2)^2
A=1
a=2
a
A
$a=3
a$=3
ls()
rtm(ls())
rm(ls())
rm(list=ls())
product <- function(x, y){
x*y
}
product(5,7)
suma1 <- function(t){
t + 1
}
suma5 <- function(numero){
numero = suma1(numero);
numero = suma1(numero);
numero = suma1(numero);
numero = suma1(numero);
suma1(numero)
}
suma5(3)
numero = suma1(numero);
suma5 <- function(numero){
numero = suma1(numero);
suma1(numero)
}
suma5(3)
suma5 <- function(numero){
numero = suma1(numero);
numero = suma1(numero);
numero = suma1(numero);
numero = suma1(numero);
suma1(numero)
}
suma5(3)
tinytex::reinstall_tinytex()
tinytex:::is_tinytex()
tinytex:::is_tinytex()
install.packages("car")
install.packages("reticulate")
library(reticulate)
install.packages("reticulate")
install.packages("reticulate")
setwd("~/Estudios/GEI/Assignatures/ALG/2_Apunts")
y
y
Y
isntall.packages("reticulate")
install.packages("reticulate")
install.packages("reticulate")
setwd("~/Estudios/Estudios MOOC/Udemy/Estadística Descriptiva/repositorio/r-basic_mossa/scripts/tema12")
setwd("~/Estudios/Estudios MOOC/Udemy/Estadística Descriptiva/repositorio/r-basic_mossa/scripts/tema2")
scan()
x <- c(23, 4., 4)
fix(x)
